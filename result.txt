filename: background.js 
content:
```let currentApiConfig = null;



// 监听API配置变化
chrome.storage.onChanged.addListener((changes) => {
  if (changes.apiConfigs) {
    updateCurrentApiConfig(changes.apiConfigs.newValue);
  }
});

function updateCurrentApiConfig(configs) {
  currentApiConfig = configs?.find(c => c.enabled);
}

chrome.runtime.onInstalled.addListener(() => {
  initContextMenus();
  chrome.storage.sync.get(['apiConfigs', 'customFunctions'], ({ apiConfigs, customFunctions }) => {
    updateCurrentApiConfig(apiConfigs);
  });
});

async function initContextMenus() {
  chrome.contextMenus.removeAll();
  
  chrome.contextMenus.create({
    id: "mainMenu",
    title: "Grompt!",
    contexts: ["editable", "selection"]
  });

  // 添加默认功能
  const { customFunctions = [] } = await chrome.storage.sync.get('customFunctions');
  customFunctions.forEach(func => {
    chrome.contextMenus.create({
      parentId: "mainMenu",
      id: func.id,
      title: func.name,
      contexts: ["editable", "selection"]
    });
  });

  // 添加管理按钮
  chrome.contextMenus.create({
    parentId: "mainMenu",
    id: "manageFunctions",
    title: "管理功能",
    contexts: ["editable", "selection"]
  });
}

chrome.contextMenus.onClicked.addListener(async (info, tab) => {
  if (info.menuItemId === "manageFunctions") {
    // 检查是否存在API配置
    chrome.storage.sync.get(['apiConfigs'], ({ apiConfigs = [] }) => {
        if (apiConfigs.length === 0) {
          chrome.tabs.sendMessage(tab.id, {
            action: "showNotification",
            message: "请先添加并启用API配置"
          });
        } else {
          chrome.runtime.openOptionsPage();
        }
    });
    return;
  }


  if (info.menuItemId.startsWith("custom_")) {
    const { customFunctions = [] } = await chrome.storage.sync.get('customFunctions');
    const func = customFunctions.find(f => f.id === info.menuItemId);
    
    if (!currentApiConfig) {
      chrome.tabs.sendMessage(tab.id, { 
        action: "showNotification",
        message: "请先启用API配置" 
      });
      return;
    }

    chrome.tabs.sendMessage(tab.id, { 
      action: "processText",
      prompt: func.prompt,
      apiConfig: currentApiConfig
    });
  }
});

// 接收来自内容脚本的新功能请求
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "addNewFunction") {
    chrome.storage.sync.get(['customFunctions'], ({ customFunctions = [] }) => {
      const newFunctions = [...customFunctions, {
        id: `custom_${Date.now()}`,
        name: request.name,
        prompt: request.prompt
      }];
      chrome.storage.sync.set({ customFunctions: newFunctions }, () => {
        initContextMenus();
        sendResponse({ success: true });
      });
    });
    return true;
  }
});
```

filename: content.js 
content:
```console.log("Content script loaded");

let floatingWindow = null;

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === "processText") {
    processText(message.prompt, message.apiConfig).then(sendResponse);
    return true;
  }
});

async function processText(promptTemplate, apiConfig) {
  if (!apiConfig?.url || !apiConfig?.key) {
        showNotification('请先配置并启用API');
        return { error: "API未配置" };
      }
  const selectedText = getSelectedText();
  if (!selectedText) return { error: "No text selected" };

  try {
    const response = await fetch(apiConfig.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiConfig.key}`
      },
      body: JSON.stringify({
        model: apiConfig.model,
        messages: [
          { role: "system", content: promptTemplate },
          { role: "user", content: selectedText }
        ]
      })
    });

    const result = await response.json();
    const processedText = result.choices[0].message.content.trim();
    
    showFloatingWindow(processedText);
    return { success: true };

  } catch (error) {
    console.error("API请求失败:", error);
    return { error: error.message };
  }
}

function getSelectedText() {
  return window.getSelection().toString().trim();
}

function showFloatingWindow(content) {
  removeFloatingWindow();

  floatingWindow = document.createElement("div");
  floatingWindow.style.cssText = `
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border: 1px solid #ccc;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 9999;
    max-width: 500px;
    max-height: 80vh;
    overflow: auto;
  `;

  const contentDiv = document.createElement("div");
  contentDiv.textContent = content;
  
  const copyButton = document.createElement("button");
  copyButton.textContent = "复制";
  copyButton.onclick = () => copyToClipboard(content);

  floatingWindow.append(contentDiv, copyButton);
  document.body.appendChild(floatingWindow);
}

function removeFloatingWindow() {
  if (floatingWindow) {
    floatingWindow.remove();
    floatingWindow = null;
  }
}

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    console.log("Message received in content script:", message);

    if (message.action === "refactorText") {
        const activeElement = document.activeElement;

        if (!activeElement) {
            console.log("No active element");
            sendResponse({ error: "No active element" });
            return;
        }

        let selectedText = null;
        if (activeElement.isContentEditable) {
            selectedText = window.getSelection().toString() || activeElement.innerText;
        } else if (activeElement.value) {
            selectedText = activeElement.value.substring(activeElement.selectionStart, activeElement.selectionEnd) || activeElement.value;
        }

        if (!selectedText) {
            console.log("No text input element focused or no text selected");
            sendResponse({ error: "No text input element focused or no text selected" });
            return;
        }

        console.log("Selected text:", selectedText);

        const url = 'https://api.ppinfra.com/v3/openai/chat/completions';
        console.log("Fetching URL:", url);

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${message.apiKey}`
            },
            body: JSON.stringify({
                model: "deepseek/deepseek-v3",
                messages: [
                    {role: "system", content: "You are a professional prompt engineer. Your task is to optimize the user's prompt by making it clearer, more concise, and more effective. Only output the improved prompt without adding any commentary or labels. If the original prompt is already optimized, return it unchanged."},
                    {role: "user", content: `${selectedText}`}
                ],
                max_tokens: 512,
                temperature: 0.9
            })
        })
        
        .then(response => {
            console.log("Fetch response:", response);
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            return response.json();
        })
        .then(result => {
            console.log("Result:", result);
            if (result.choices && result.choices[0] && result.choices[0].message) {
                let rephrased = result.choices[0].message.content.trim();
                
                // Remove surrounding quotes if present
                if ((rephrased.startsWith('"') && rephrased.endsWith('"')) || (rephrased.startsWith("'") && rephrased.endsWith("'"))) {
                    rephrased = rephrased.slice(1, -1);
                }
                
                if (activeElement.isContentEditable) {
                    activeElement.innerText = rephrased;
                } else {
                    activeElement.value = rephrased;
                }
                copyToClipboard(rephrased);
                sendResponse({ success: true, rephrased: rephrased });
            } else {
                sendResponse({ success: false, error: "Failed to rephrase the text" });
            }
        })
        
        .catch(error => {
            console.error("Error during fetch:", error);
            sendResponse({ success: false, error: error.message });
        });

        return true; // keep the messaging channel open for sendResponse
    }
});

function copyToClipboard(text) {
    console.log("Copying to clipboard:", text);
    navigator.clipboard.writeText(text).then(() => {
        console.log("Copied to clipboard successfully!");
    }).catch(err => {
        console.error("Failed to copy to clipboard:", err);
    });
}

function showNotification(message) {
    const notice = document.createElement('div');
    notice.textContent = message;
    notice.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #ff4757;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      z-index: 10000;
    `;
    document.body.appendChild(notice);
    setTimeout(() => notice.remove(), 3000);
  }```

filename: popup.html 
content:
```<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Grompt 管理</title>
    <style>
        body {
            min-width: 400px;  /* 设置最小宽度 */
            padding: 15px;     /* 添加内边距 */
            font-family: Arial, sans-serif;
        }
        .api-config {
            background: #f8f9fa;
            border-radius: 8px;
            margin: 10px 0;
            padding: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .empty-tip {
            color: #6c757d;
            text-align: center;
            padding: 20px;
        }

        input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }
        .toggle-btn { 
            float: right;
            cursor: pointer;
            margin-left: 10px;
        }
        button {
            width: 100%;
            padding: 8px;
            margin: 5px 0;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background: #0056b3;
        }
        h3 {
            margin-top: 20px;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        #configList, #functionList {
            width: 100%;
            box-sizing: border-box;
        }
    </style>
</head>
<body>
    <h3>API 配置</h3>
    <div id="configList"></div>
    <!-- 新增API配置表单 -->
    <div id="apiForm" style="display: none;">
        <div style="margin: 10px 0;">
            <input type="text" id="configName" placeholder="配置名称" style="width: 100%; margin: 5px 0;">
            <input type="url" id="apiUrl" placeholder="API地址 (https://)" style="width: 100%; margin: 5px 0;">
            <input type="text" id="apiKey" placeholder="API密钥" style="width: 100%; margin: 5px 0;">
            <input type="text" id="apiModel" placeholder="模型名称" style="width: 100%; margin: 5px 0;">
            <div style="display: flex; gap: 5px; margin-top: 10px;">
                <button onclick="saveApiConfig()" style="flex: 1;">保存</button>
                <button onclick="cancelApiConfig()" style="flex: 1; background: #6c757d;">取消</button>
            </div>
        </div>
    </div>
    <button id="addApiConfig">新增API配置</button>

    <h3>自定义功能</h3>
    <div id="functionList"></div>
    <button id="addFunction">新增功能</button>

    <script src="popup.js"></script>
</body>
</html>
```

filename: popup.js 
content:
```// popup.js
document.getElementById('addApiConfig').addEventListener('click', () => {
    document.getElementById('apiForm').style.display = 'block';
    document.getElementById('addApiConfig').style.display = 'none';
});

function saveApiConfig() {
    const name = document.getElementById('configName').value.trim();
    const url = document.getElementById('apiUrl').value.trim();
    const key = document.getElementById('apiKey').value.trim();
    const model = document.getElementById('apiModel').value.trim() || 'default-model';

    if (!validateApiConfig(name, url, key)) return;

    chrome.storage.sync.get(['apiConfigs'], ({ apiConfigs = [] }) => {
        const newConfig = { name, url, key, model, enabled: false };
        chrome.storage.sync.set({ 
            apiConfigs: [...apiConfigs, newConfig] 
        }, () => {
            clearForm();
            refreshConfigs();
        });
    });
}

function validateApiConfig(name, url, key) {
    if (!name) {
        alert('配置名称不能为空');
        return false;
    }
    if (!url.startsWith('https://')) {
        alert('请输入有效的HTTPS地址');
        return false;
    }
    if (!key) {
        alert('API密钥不能为空');
        return false;
    }
    return true;
}

function cancelApiConfig() {
    clearForm();
}

function clearForm() {
    document.getElementById('apiForm').style.display = 'none';
    document.getElementById('addApiConfig').style.display = 'block';
    document.getElementById('configName').value = '';
    document.getElementById('apiUrl').value = '';
    document.getElementById('apiKey').value = '';
    document.getElementById('apiModel').value = '';
}
  
// 修改后的refreshConfigs函数
function refreshConfigs() {
    chrome.storage.sync.get(['apiConfigs'], ({ apiConfigs = [] }) => {
        const list = document.getElementById('configList');
        list.innerHTML = apiConfigs.length === 0 ? 
            '<div class="empty-tip">暂无配置，点击上方按钮添加</div>' : '';

        apiConfigs.forEach((config, index) => {
            const configItem = document.createElement('div');
            configItem.className = 'api-config';
            configItem.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h4>${config.name}</h4>
                        <div style="font-size: 0.9em; color: #666;">
                            ${config.model} | ${shortenUrl(config.url)}
                        </div>
                    </div>
                    <div class="toggle-btn" data-index="${index}">
                        ${config.enabled ? '✅ 已启用' : '❌ 未启用'}
                    </div>
                </div>
            `;
            configItem.querySelector('.toggle-btn').onclick = () => toggleConfig(index);
            list.appendChild(configItem);
        });
    });
}

function shortenUrl(url) {
    return url.replace(/^https?:\/\/(www\.)?/,'').slice(0, 20) + '...';
}

function toggleConfig(index) {
chrome.storage.sync.get(['apiConfigs'], ({ apiConfigs }) => {
    apiConfigs = apiConfigs.map((c, i) => ({
    ...c,
    enabled: i === index ? !c.enabled : false
    }));
    chrome.storage.sync.set({ apiConfigs }, refreshConfigs);
});
}

// 自定义功能管理
document.getElementById('addFunction').addEventListener('click', () => {
const name = prompt('功能名称:');
const promptText = prompt('提示词模板:');

if (name && promptText) {
    chrome.runtime.sendMessage({
    action: "addNewFunction",
    name,
    prompt: promptText
    }, () => location.reload());
}
});

// 初始化
document.addEventListener('DOMContentLoaded', refreshConfigs);
  ```

